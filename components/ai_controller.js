const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");
require("dotenv").config();

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};

async function run(message) {
    const chatSession = model.startChat({
        generationConfig,
        history: [
            {
                role: "user",
                parts: [
                    { text: "remember this is a prompter where teacher asked you about data of student like makrs or average or anything else " },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Okay, I understand. I'm ready! Ask me anything you need to know about the student data. I'll do my best to provide the information accurately and efficiently. I'm comfortable with requests about:\n\n*   **Specific Student Marks:** \"What was John's score on the last math test?\"\n*   **Class Averages:** \"What's the average science score for the entire class?\"\n*   **Subject-Specific Data:** \"How did students perform in history overall?\"\n*   **Comparisons:** \"Who had the highest score in English this semester?\"\n*   **Trends:** \"Have student scores in writing improved over the last year?\"\n*   **Identifying Students:** \"Which students scored below 60% on the reading assessment?\"\n*   **Descriptive Statistics:** \"What is the standard deviation of scores in physics?\"\n\nJust let me know what you're looking for, and I'll do my best to help. Remember that, as an AI, I do not have direct access to any real student data. I can only respond based on information you provide in your prompts. Let's begin. What's your first question?\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "student data i stored in mysql database, how should i give you the right to get data from that database(only get permission not to write data) so that you can filter out the results on that fetch data\n" },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Okay, I understand that the student data is stored in a MySQL database and you want me to be able to access it (read-only) to answer your questions. Since I am an AI, I cannot directly connect to external databases. Providing me with direct access would pose significant security risks and is not possible within the constraints of this interaction.\n\nHowever, we can achieve your goal by implementing the following **workaround:**\n\n1.  **You (The Teacher) Act as an intermediary:**\n\n    *   You will need to interact with the MySQL database yourself using a suitable tool (e.g., Python with `mysql.connector` or `pymysql`, or a database management tool like MySQL Workbench).\n    *   You will construct the SQL queries based on my questions.\n    *   You will execute those queries against your database.\n    *   You will then provide me with the *results* of the query in a structured format (e.g., a list, a dictionary, a CSV string, or a simple text output).\n\n2.  **Example Scenario**\n\n    *   **Teacher:** \"What is the average score of students in math class?\"\n    *   **You (The Teacher):** \"Okay, I will execute this SQL query: `SELECT AVG(math_score) FROM student_scores;`\"\n    *   **You (The Teacher):** \"The result of the query is: `82.5`\"\n    *   **Me (The AI):** \"The average math score is 82.5. Is there anything else I can help you with?\"\n\n3.  **More Complex Queries**\n\n    If you wanted to know the names of all students who scored above 90 in history:\n\n    *   **Teacher:** \"List the names of students who scored above 90 in history.\"\n    *   **You (The Teacher):** \"I will execute this query: `SELECT student_name FROM student_scores WHERE subject = 'History' AND score > 90;`\"\n    *   **You (The Teacher):** \"The results are: `[('Alice Smith',), ('Bob Johnson',)]`\" or, alternatively, you can provide it in a more readable format: \"Alice Smith and Bob Johnson.\"\n    *   **Me (The AI):** \"The students who scored above 90 in history are Alice Smith and Bob Johnson. Is there anything else?\"\n\n4.  **Security Considerations**\n\n    *   This approach ensures that I (the AI) never directly interact with your database. The responsibility for data access and security remains entirely with you.\n    *   Always be mindful of the SQL queries you construct to avoid accidentally exposing sensitive information.\n    *   Use best practices for securing your MySQL database, such as strong passwords and limiting user privileges.\n\n**In summary, you will be the \"data pipeline\"**: I'll ask the questions, you'll translate them into SQL queries, execute them against your database, and provide me with the relevant results in a clear, structured format.\n\nLet's try it. What's the first question about your student data that you want me to ask? I'm ready!\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "ok i am using a NodeJS and express for backend and used EJS to server the front end, " },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Okay, that's helpful to know! Using Node.js with Express for the backend and EJS for the frontend gives you a lot of flexibility. Here's how that setup influences how we'll work together and some potential optimizations:\n\n**Understanding the Flow**\n\n1.  **You (The Teacher) - Frontend (EJS):** You'll interact with a web page that you've created using EJS templates. This page could have input fields for specifying the type of data you need (e.g., \"average score,\" \"top 5 students,\" etc.) and potentially filters (e.g., \"for math class,\" \"in the last semester\").\n\n2.  **Frontend -> Backend (Express/Node.js):**  When you submit a request from the EJS frontend, it will send an HTTP request (likely a GET or POST request) to your Node.js/Express backend. The request will include information about the data you need.\n\n3.  **Backend (Express/Node.js) -> MySQL:** In your Express route handler, you'll:\n    *   Receive the request from the frontend.\n    *   Construct the appropriate SQL query based on the request parameters.\n    *   Use a MySQL connector library (like `mysql` or `mysql2`) to connect to your database and execute the query.\n    *   Fetch the results from the database.\n\n4.  **Backend (Express/Node.js) -> AI (You):**  This is where you will act as an intermediary.  You will take the data you retrieved from the database, format it appropriately, and *tell me the results*.  This could be through copying and pasting into our chat or by describing the relevant information.\n\n5.  **AI -> You:** I will analyze the data you provide and give you insights, summaries, or answer specific questions related to the data.\n\n6.  **You (The Teacher) - Backend (Express/Node.js) -> Frontend (EJS) - Optional:**  You could also modify your setup to send the data back to the frontend in the original EJS web page. This would allow the AI analysis to be integrated back into your EJS interface.\n\n**Example Scenario with Node.js/Express**\n\nLet's say you have a form in your EJS template where you can select a subject and request the average score.\n\n*   **EJS Form:**\n\n    ```html\n    <form action=\"/getAverageScore\" method=\"post\">\n      <label for=\"subject\">Subject:</label>\n      <select id=\"subject\" name=\"subject\">\n        <option value=\"Math\">Math</option>\n        <option value=\"Science\">Science</option>\n        <option value=\"History\">History</option>\n      </select>\n      <button type=\"submit\">Get Average Score</button>\n    </form>\n    ```\n\n*   **Express Route Handler:**\n\n    ```javascript\n    const express = require('express');\n    const mysql = require('mysql');\n    const app = express();\n\n    app.use(express.urlencoded({ extended: true })); // For parsing form data\n\n    const connection = mysql.createConnection({\n      host: 'localhost',\n      user: 'your_username',\n      password: 'your_password',\n      database: 'your_database'\n    });\n\n    connection.connect();\n\n    app.post('/getAverageScore', (req, res) => {\n      const subject = req.body.subject;\n      const query = `SELECT AVG(score) AS average_score FROM student_scores WHERE subject = ?`;\n\n      connection.query(query, [subject], (error, results, fields) => {\n        if (error) {\n          console.error(error);\n          res.status(500).send('Error retrieving data');\n          return;\n        }\n\n        const averageScore = results[0].average_score;\n\n        // YOU:  At this point, you would copy the 'averageScore' value (e.g., 85.2)\n        //       and tell me: \"The average score for [subject] is [averageScore]\"\n        //       For example: \"The average score for Math is 85.2\"\n\n        // --- Optional:  Return the data to the frontend ---\n        res.send(`The average score for ${subject} is ${averageScore}`);\n      });\n    });\n\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```\n\n**Key Improvements with this Setup**\n\n*   **Clear Separation of Concerns:**  The frontend handles the user interface, the backend handles data retrieval, and I handle the analysis and insights.\n*   **Dynamic Queries:**  You can easily build different SQL queries based on user input from the EJS form.\n*   **Error Handling:** You can implement robust error handling in your Express route handlers to catch database errors.\n*   **Data Formatting:** You have full control over how the data is formatted before you present it to me.\n\n**Let's try an example based on this setup:**\n\nImagine you've implemented the code above. You select \"Science\" in the EJS form and submit the request. Your Express route executes the query and retrieves the average Science score from your database.\n\n**Now, what do you (the teacher) tell me?  Give me the average science score that you got from your database.** Then, I can ask you follow-up questions.\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "ok i think you should five me some return values like getStudentAll, or getStudentWithName, getStudentMarks, getStudentByClass, so that i can filter out the response of yours need and then give you the requried data from database and then use something like for teahcer = (your response) and i will give this data to frontend teacher\n" },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Excellent suggestion! Providing a set of pre-defined, function-like instructions for data retrieval will streamline the interaction and make it much more efficient. Here's how we can structure this, along with example responses you'd provide:\n\n**Data Retrieval Instructions**\n\nI will use these instructions to tell you *exactly* what kind of data I need.  You'll then execute the appropriate query and give me the results in a structured format.\n\n*   **`getStudentAll()`**:  Returns all student data (student ID, name, class, subject scores, etc.).\n    *   **Expected Response Format:** A list of dictionaries, where each dictionary represents a student.\n\n        ```\n        [\n          { \"student_id\": 1, \"name\": \"Alice Smith\", \"class\": \"10A\", \"math_score\": 85, \"science_score\": 92, \"history_score\": 78 },\n          { \"student_id\": 2, \"name\": \"Bob Johnson\", \"class\": \"10A\", \"math_score\": 90, \"science_score\": 88, \"history_score\": 95 },\n          ...\n        ]\n        ```\n\n*   **`getStudentWithName(name)`**: Returns data for students with the specified name.\n    *   **Expected Response Format:** A list of dictionaries (similar to `getStudentAll()`).\n\n        ```\n        [\n          { \"student_id\": 3, \"name\": \"Charlie Brown\", \"class\": \"9B\", \"math_score\": 70, \"science_score\": 75, \"history_score\": 80 },\n          { \"student_id\": 4, \"name\": \"Charlie Brown\", \"class\": \"11C\", \"math_score\": 88, \"science_score\": 91, \"history_score\": 85 }\n        ]\n        ```\n\n*   **`getStudentMarks(student_id)`**: Returns the subject scores for a specific student ID.\n    *   **Expected Response Format:** A dictionary of subject:score pairs.\n\n        ```\n        { \"math_score\": 92, \"science_score\": 85, \"history_score\": 98, \"english_score\": 90 }\n        ```\n\n*   **`getStudentByClass(class_name)`**: Returns data for students in the specified class.\n    *   **Expected Response Format:** A list of dictionaries (similar to `getStudentAll()`).\n\n        ```\n        [\n          { \"student_id\": 5, \"name\": \"David Lee\", \"class\": \"11A\", \"math_score\": 80, \"science_score\": 82, \"history_score\": 88 },\n          { \"student_id\": 6, \"name\": \"Eve Wilson\", \"class\": \"11A\", \"math_score\": 95, \"science_score\": 90, \"history_score\": 92 },\n          ...\n        ]\n        ```\n\n*   **`getAllClasses()`**: Returns a list of all unique class names.\n    *   **Expected Response Format:** A list of strings.\n\n        ```\n        [\"9A\", \"9B\", \"10A\", \"10B\", \"11A\", \"11B\", \"11C\", \"12A\", \"12B\"]\n        ```\n\n*   **`getAverageScoreBySubject(subject_name)`**: Returns the average score for a specific subject across all students.\n    *   **Expected Response Format:** A single floating-point number.\n\n        ```\n        82.75\n        ```\n\n*   **`getTopNStudentsBySubject(subject_name, n)`**: Returns the top *n* students and their scores in a specific subject.  The response should be ordered by score (highest to lowest).\n      * **Expected Response Format:** A list of dictionaries, each containing student name and score.\n\n        ```\n        [\n          { \"name\": \"Eve Wilson\", \"score\": 98 },\n          { \"name\": \"Frank Miller\", \"score\": 95 },\n          { \"name\": \"Grace Davis\", \"score\": 92 }\n        ]\n        ```\n*   **`getLowestNStudentsBySubject(subject_name, n)`**: Returns the lowest *n* students and their scores in a specific subject.  The response should be ordered by score (lowest to highest).\n      * **Expected Response Format:** A list of dictionaries, each containing student name and score.\n\n        ```\n        [\n          { \"name\": \"Alice Smith\", \"score\": 40 },\n          { \"name\": \"Frank Miller\", \"score\": 55 },\n          { \"name\": \"Grace Davis\", \"score\": 59 }\n        ]\n        ```\n\n**How it Works**\n\n1.  I will use one of these functions to request data.  For example:  `getStudentByClass(\"10A\")`\n2.  You will execute the corresponding SQL query against your database.\n3.  You will format the results into the *exact* format specified above.\n4.  You will provide the results to me.\n\n**Benefits**\n\n*   **Clear Communication:** No ambiguity about what I need.\n*   **Consistent Format:**  Easier for me to process the data.\n*   **Efficiency:** Faster data retrieval and analysis.\n\n**Let's Start!**\n\nI'm going to try it out.\n\n**`getStudentByClass(\"10A\")`**\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "now you write the above all response by creating mysql connection through a funtion called getConnection and you can use this like const { getConnection } = require(\"../models/getConnection\");connection = await getConnection();\n\n        // Fetch student details\n        const [studentResults] = await connection.execute(\n            `SELECT s.*, p.image \n             FROM students s \n             LEFT JOIN photo p ON s.school_id = p.id \n             WHERE s.school_id = ?`,\n            [studentId]\n        );" },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "I understand what you're proposing. However, let me re-emphasize that **I, as an AI, cannot directly execute code or connect to databases.** I do not have the ability to run `getConnection()` or execute SQL queries. That is the crucial aspect of this interaction that must be handled by *you*.\n\nThink of it this way: I am a user of your Node.js API. You are building the API endpoints, and I am making requests to those endpoints (in this case, through text prompts). I am entirely reliant on *you* to provide the data that I need.\n\nTherefore, I cannot \"write the above all response\" in terms of code. I can only *describe* the code that *you* would need to write in your Node.js backend.\n\n**Revised Explanation**\n\n1.  **My Request:** I ask for `getStudentByClass(\"10A\")`.\n\n2.  **Your Backend Code (Conceptual):**\n\n    ```javascript\n    // In your Node.js Express route handler:\n\n    const express = require('express');\n    const router = express.Router();  // Use Express Router\n\n    const { getConnection } = require(\"../models/getConnection\");  // Assumed file location\n    const mysql = require('mysql2/promise'); // Import the promise-based version\n\n    router.get('/getStudentByClass/:className', async (req, res) => { // Use GET for read-only operation\n      try {\n        const className = req.params.className;\n        const connection = await getConnection();\n\n        const [studentResults] = await connection.execute(\n          `SELECT student_id, name, class, math_score, science_score, history_score  // Specify columns!\n           FROM student_scores  // Assuming table name\n           WHERE class = ?`,\n          [className]\n        );\n\n        connection.release();  // Important: Release the connection back to the pool\n\n        // Format the results according to my expected format:\n        const formattedResults = studentResults.map(row => ({\n          \"student_id\": row.student_id,\n          \"name\": row.name,\n          \"class\": row.class,\n          \"math_score\": row.math_score,\n          \"science_score\": row.science_score,\n          \"history_score\": row.history_score\n        }));\n\n        // At *this* point, you, the teacher, would *tell me* the `formattedResults`.\n        // You could copy and paste the JSON string, or describe it.\n        // For example:  \"Here's the data for class 10A:  [... the JSON ... ]\"\n        res.json(formattedResults); // Optionally, you can send the result to the frontend.\n\n      } catch (error) {\n        console.error(error);\n        res.status(500).send('Error retrieving student data');\n      }\n    });\n\n    module.exports = router;  // Export the router\n\n    ```\n\n**Explanation of the Code (For Your Understanding):**\n\n*   **`getConnection()`**:  This function (which *you* must implement) is responsible for establishing a connection to your MySQL database using a connection pool.  This is important for performance and resource management.\n*   **Route Parameter:**  The route `/getStudentByClass/:className` uses a route parameter `:className` to get the class name from the URL (e.g., `/getStudentByClass/10A`).\n*   **SQL Query:** The query selects the necessary columns from the `student_scores` table based on the `className`.  *Make sure your table and column names match your actual database schema!*  It's VERY important to explicitly list the columns you need to prevent exposing sensitive information.\n*   **`connection.execute()`**: Executes the SQL query.  We use the promise-based version (`mysql2/promise`) so we can use `async/await`.\n*   **`formattedResults`**: This is the crucial part.  You *must* format the results from the database into a list of dictionaries, exactly as I specified in my previous response. This ensures that I can understand the data. The `map()` function transforms the rows from the database into the required format.  Make sure the keys match the keys I expect (e.g., `student_id`, `name`, `class`, `math_score`, etc.).\n*   **Error Handling:** The `try...catch` block handles potential errors during the database connection or query execution.  It's important to log errors and send an appropriate error response to the client.\n*   **`connection.release()`**: This releases the connection back to the connection pool, which is essential to prevent resource exhaustion.\n*   **`res.json(formattedResults)` (Optional):** This sends the formatted results back to the frontend, so your EJS page can display the data.\n\n**Important Notes:**\n\n*   **Replace Placeholders:**  Replace `\"your_username\"`, `\"your_password\"`, and `\"your_database\"` with your actual MySQL credentials.\n*   **Table and Column Names:**  Make sure that the table name (`student_scores`) and column names (`student_id`, `name`, `class`, `math_score`, etc.) in the SQL query match your actual database schema.  If they don't, the query will fail, or you'll get incorrect data.\n*   **Security:** Use parameterized queries (as shown in the code) to prevent SQL injection vulnerabilities. Never directly embed user input into SQL queries.\n*   **Connection Pooling:** Implement a connection pool for efficient database connection management.  The `getConnection()` function should handle this.\n*   **Error Handling:**  Implement comprehensive error handling to catch and log database errors.\n*   **Authentication/Authorization:** If you have user accounts, ensure that only authorized users can access the student data.\n\n**Now, let's try it again:**\n\n**`getStudentByClass(\"10A\")`**\n\n**After you implement the code (or a simplified version of it), execute the query against your database, format the results, and then tell me the data. I'm ready when you are!**\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "ok now write all beckend funtion you need as you give above for getting data on teacher asked question so that i filter out the required funtion of your reply and send you the data \n" },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Okay, I understand. Here's a breakdown of the backend functions (Node.js/Express route handlers) you would need to implement, based on the data retrieval instructions I provided earlier. Each function will:\n\n1.  Receive a request (typically a GET request).\n2.  Connect to the MySQL database using your `getConnection()` function.\n3.  Construct and execute the appropriate SQL query.\n4.  Format the results into the *exact* format I specified.\n5.  (Optionally) Send the results back to the frontend.\n6.  Most importantly, provide the results to *me* (by copying and pasting the JSON, or describing the contents).\n\n**Important:  These are *descriptions* of functions.  I cannot create the actual code. You must write the code in your Node.js/Express application.**\n\n**1. `getStudentAll()`**\n\n*   **Route:** `GET /getStudentAll`\n*   **Description:** Retrieves all student data.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getStudentAll', async (req, res) => {\n  try {\n    const connection = await getConnection();\n\n    const [studentResults] = await connection.execute(\n      `SELECT student_id, name, class, math_score, science_score, history_score FROM student_scores`  // Explicitly list columns!\n    );\n\n    connection.release();\n\n    const formattedResults = studentResults.map(row => ({\n      \"student_id\": row.student_id,\n      \"name\": row.name,\n      \"class\": row.class,\n      \"math_score\": row.math_score,\n      \"science_score\": row.science_score,\n      \"history_score\": row.history_score\n    }));\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving student data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**2. `getStudentWithName(name)`**\n\n*   **Route:** `GET /getStudentWithName/:name`\n*   **Description:** Retrieves data for students with the specified name.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getStudentWithName/:name', async (req, res) => {\n  try {\n    const name = req.params.name;\n    const connection = await getConnection();\n\n    const [studentResults] = await connection.execute(\n      `SELECT student_id, name, class, math_score, science_score, history_score FROM student_scores WHERE name = ?`,\n      [name]\n    );\n\n    connection.release();\n\n    const formattedResults = studentResults.map(row => ({\n      \"student_id\": row.student_id,\n      \"name\": row.name,\n      \"class\": row.class,\n      \"math_score\": row.math_score,\n      \"science_score\": row.science_score,\n      \"history_score\": row.history_score\n    }));\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving student data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**3. `getStudentMarks(student_id)`**\n\n*   **Route:** `GET /getStudentMarks/:student_id`\n*   **Description:** Retrieves the subject scores for a specific student ID.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getStudentMarks/:student_id', async (req, res) => {\n  try {\n    const studentId = req.params.student_id;\n    const connection = await getConnection();\n\n    const [studentResults] = await connection.execute(\n      `SELECT math_score, science_score, history_score, english_score FROM student_scores WHERE student_id = ?`,\n      [studentId]\n    );\n\n    connection.release();\n\n    if (studentResults.length === 0) {\n      res.status(404).send('Student not found');\n      return;\n    }\n\n    const row = studentResults[0]; // Only expecting one result\n    const formattedResults = {\n      \"math_score\": row.math_score,\n      \"science_score\": row.science_score,\n      \"history_score\": row.history_score,\n      \"english_score\": row.english_score\n    };\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving student data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**4. `getStudentByClass(class_name)`**\n\n*   **Route:** `GET /getStudentByClass/:class_name`\n*   **Description:** Retrieves data for students in the specified class.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getStudentByClass/:class_name', async (req, res) => {\n  try {\n    const className = req.params.class_name;\n    const connection = await getConnection();\n\n    const [studentResults] = await connection.execute(\n      `SELECT student_id, name, class, math_score, science_score, history_score FROM student_scores WHERE class = ?`,\n      [className]\n    );\n\n    connection.release();\n\n    const formattedResults = studentResults.map(row => ({\n      \"student_id\": row.student_id,\n      \"name\": row.name,\n      \"class\": row.class,\n      \"math_score\": row.math_score,\n      \"science_score\": row.science_score,\n      \"history_score\": row.history_score\n    }));\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving student data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**5. `getAllClasses()`**\n\n*   **Route:** `GET /getAllClasses`\n*   **Description:** Retrieves a list of all unique class names.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getAllClasses', async (req, res) => {\n  try {\n    const connection = await getConnection();\n\n    const [classResults] = await connection.execute(\n      `SELECT DISTINCT class FROM student_scores`\n    );\n\n    connection.release();\n\n    const formattedResults = classResults.map(row => row.class);  // Extract the class name\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving class data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**6. `getAverageScoreBySubject(subject_name)`**\n\n*   **Route:** `GET /getAverageScoreBySubject/:subject_name`\n*   **Description:** Retrieves the average score for a specific subject across all students.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getAverageScoreBySubject/:subject_name', async (req, res) => {\n  try {\n    const subjectName = req.params.subject_name;\n    const connection = await getConnection();\n\n    // Dynamically build the column name based on the subject\n    let scoreColumn;\n    switch (subjectName.toLowerCase()) {\n      case \"math\":      scoreColumn = \"math_score\"; break;\n      case \"science\":   scoreColumn = \"science_score\"; break;\n      case \"history\":   scoreColumn = \"history_score\"; break;\n      case \"english\":   scoreColumn = \"english_score\"; break;\n      default:\n        res.status(400).send(\"Invalid subject name\");\n        return;\n    }\n\n    const query = `SELECT AVG(${scoreColumn}) AS average_score FROM student_scores`;\n\n    const [averageResult] = await connection.execute(query);\n\n    connection.release();\n\n    const averageScore = averageResult[0].average_score;\n    const formattedResults = averageScore; // It's just a number\n\n    // YOU: Tell me the average score. For example: \"82.5\"\n    res.json(formattedResults);\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving average score');\n  }\n});\n\nmodule.exports = router;\n```\n\n**7. `getTopNStudentsBySubject(subject_name, n)`**\n\n*   **Route:** `GET /getTopNStudentsBySubject/:subject_name/:n`\n*   **Description:** Retrieves the top *n* students and their scores in a specific subject.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getTopNStudentsBySubject/:subject_name/:n', async (req, res) => {\n  try {\n    const subjectName = req.params.subject_name;\n    const n = parseInt(req.params.n);  // Parse n as an integer\n    if(isNaN(n) || n <= 0){\n        res.status(400).send(\"Invalid value for n. It must be a positive integer\");\n        return;\n    }\n\n    const connection = await getConnection();\n\n    // Dynamically build the column name based on the subject\n    let scoreColumn;\n    switch (subjectName.toLowerCase()) {\n      case \"math\":      scoreColumn = \"math_score\"; break;\n      case \"science\":   scoreColumn = \"science_score\"; break;\n      case \"history\":   scoreColumn = \"history_score\"; break;\n      case \"english\":   scoreColumn = \"english_score\"; break;\n      default:\n        res.status(400).send(\"Invalid subject name\");\n        return;\n    }\n\n\n    const query = `SELECT name, ${scoreColumn} AS score FROM student_scores ORDER BY ${scoreColumn} DESC LIMIT ?`;\n\n    const [studentResults] = await connection.execute(query, [n]);\n\n    connection.release();\n\n    const formattedResults = studentResults.map(row => ({\n      \"name\": row.name,\n      \"score\": row.score\n    }));\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**8. `getLowestNStudentsBySubject(subject_name, n)`**\n\n*   **Route:** `GET /getLowestNStudentsBySubject/:subject_name/:n`\n*   **Description:** Retrieves the lowest *n* students and their scores in a specific subject.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getLowestNStudentsBySubject/:subject_name/:n', async (req, res) => {\n  try {\n    const subjectName = req.params.subject_name;\n    const n = parseInt(req.params.n);  // Parse n as an integer\n     if(isNaN(n) || n <= 0){\n        res.status(400).send(\"Invalid value for n. It must be a positive integer\");\n        return;\n    }\n    const connection = await getConnection();\n\n     // Dynamically build the column name based on the subject\n     let scoreColumn;\n     switch (subjectName.toLowerCase()) {\n       case \"math\":      scoreColumn = \"math_score\"; break;\n       case \"science\":   scoreColumn = \"science_score\"; break;\n       case \"history\":   scoreColumn = \"history_score\"; break;\n       case \"english\":   scoreColumn = \"english_score\"; break;\n       default:\n         res.status(400).send(\"Invalid subject name\");\n         return;\n     }\n\n    const query = `SELECT name, ${scoreColumn} AS score FROM student_scores ORDER BY ${scoreColumn} ASC LIMIT ?`;\n\n    const [studentResults] = await connection.execute(query, [n]);\n\n    connection.release();\n\n    const formattedResults = studentResults.map(row => ({\n      \"name\": row.name,\n      \"score\": row.score\n    }));\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**Key Considerations:**\n\n*   **Error Handling:** Robust error handling is crucial. Validate inputs, handle database connection errors, and provide informative error messages to the client.\n*   **SQL Injection:** Always use parameterized queries to prevent SQL injection attacks.\n*   **Connection Pooling:** Implement a connection pool for efficient database connection management.\n*   **Data Formatting:** Ensure that the data is formatted *exactly* as I specify in the instructions. The names of the key matters and data type of the value matters.\n*   **Security:** Protect your database credentials and restrict access to the database to authorized users.\n*   **Column names should match exactly same in your db for specific subjects.**\n\n**Next Steps**\n\n1.  **Implement these functions** in your Node.js/Express backend.\n2.  **Test each function** to make sure it works correctly.\n3.  When I ask for data (using one of the functions), you will:\n    *   Call the corresponding function in your backend.\n    *   Get the results.\n    *   Format the results according to the specifications.\n    *   **Tell me the results by copying and pasting the JSON or describing the data.**\n\nI'm ready to start making requests when you're ready.\n\nLet's start with an easy one to test the flow.\n\n**`getAllClasses()`**\n" },
                ],
            },
            {
                role: "user",
                parts: [
                    { text: "as you give response like this  ** using or **Facilitating Practical Teaching and Learning:** or somewhere * single one rewrite this funtion to show your response ins a better way  this is client side js (\nconst chatContainer = document.getElementById(\"chat-container\");\nconst userInput = document.getElementById(\"user-input\");\nconst sendBtn = document.getElementById(\"send-btn\");\n\n// Function to append a chat message\nfunction appendMessage(sender, message) {\n    const msgDiv = document.createElement(\"div\");\n    msgDiv.classList.add(\"p-3\", \"rounded-lg\", \"max-w-[80%]\");\n    if (sender === \"user\") {\n        msgDiv.classList.add(\"bg-blue-500\", \"text-white\", \"self-end\", \"ml-auto\");\n    } else {\n        msgDiv.classList.add(\"bg-gray-200\", \"text-gray-900\", \"self-start\", \"mr-auto\");\n    }\n    msgDiv.textContent = message;\n    chatContainer.appendChild(msgDiv);\n    chatContainer.scrollTop = chatContainer.scrollHeight; // Auto-scroll to bottom\n}\n\n// Function to simulate AI response\nasync function getAIResponse(userMessage) {\n    fetch(\"/ai\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: userMessage }),\n    })\n        .then((response) => response.json())\n        .then((data) => {\n            appendMessage(\"ai\", data.reply);\n        });\n    \n})" },
                ],
            },
            {
                role: "model",
                parts: [
                    { text: "Okay, I understand. You want me to present my responses in a way that's more easily integrated into your client-side JavaScript code, particularly the `appendMessage` function you've provided. I should avoid phrases like \"using or\" and \"facilitating practical teaching and learning,\" and also avoid using italics (`*`). Basically, my responses should be plain text that can be directly inserted into your chat interface.\n\nHere's how I'll adjust my responses:\n\n*   **Focus on Direct Answers:** I'll try to answer your questions concisely and directly.\n*   **Plain Text:** I'll avoid any formatting that would interfere with the `appendMessage` function.\n*   **Code-Friendly:** When I provide code snippets (like JSON), I'll make sure they are valid and ready to be used in your JavaScript code.\n*   **No \"Meta\" Commentary:** I'll avoid commenting on the process or explaining what I'm doing, unless it's absolutely necessary.\n*   **JSON Responses** The most important thing is to give JSON response that your `ai` side on client understand\n\n**Example:**\n\nInstead of:\n\n\"The average math score is 82.5. *Is there anything else I can help you with?*\"\n\nI will now say\n\n\"82.5\"\n\nHere's the rewritten version of our last exchange, demonstrating the new approach:\n\n**Previous Request:**\n\n`getAllClasses()`\n\n**Your (the Teacher's) Backend Implementation (as before):**\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst { getConnection } = require(\"../models/getConnection\");\n\nrouter.get('/getAllClasses', async (req, res) => {\n  try {\n    const connection = await getConnection();\n\n    const [classResults] = await connection.execute(\n      `SELECT DISTINCT class FROM student_scores`\n    );\n\n    connection.release();\n\n    const formattedResults = classResults.map(row => row.class);  // Extract the class name\n\n    // YOU: Copy and paste the JSON string of 'formattedResults' to me.\n    res.json(formattedResults); // Optional: Send to frontend\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error retrieving class data');\n  }\n});\n\nmodule.exports = router;\n```\n\n**Your (the Teacher's) Response (Now Simplified):**\n\n`[\"9A\", \"9B\", \"10A\", \"10B\", \"11A\", \"11B\", \"11C\", \"12A\", \"12B\"]`\n\n**My Next Request:**\n\n`getAverageScoreBySubject(\"Math\")`\n" },
                ],
            },
        ],
    });

    const result = await chatSession.sendMessage(message);
    console.log(result.response.text());
    return result.response;
}



module.exports = { run };